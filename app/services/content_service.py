import json
import redis
from openai import AsyncOpenAI
from app.models.presentation_models import PresentationData
from app.core.custom_exceptions import ContentGenerationException
from app.core.config import settings, logger

redis_client = redis.from_url(settings.REDIS_URL)

# is_openai_configured = settings.OPENAI_API_KEY != "actual_open_ai_key"
is_openai_configured = False

client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY) if is_openai_configured else None

class ContentService:
    async def generate_content_from_topic(self, topic: str, num_slides: int) -> PresentationData:
        """
        Generates presentation content by first checking our Redis cache. If not cached, it asynchronously calls LLM and caches the result back to redis.
        """
        cache_key = f"content_cache:{topic.lower().replace(' ', '_')}:{num_slides}"
        
        try:
            if cached_content := redis_client.get(cache_key):
                logger.info(f"Cache hit for topic: '{topic}'")
                return PresentationData(**json.loads(cached_content))
        except redis.exceptions.RedisError as e:
            logger.warning(f"Redis cache check failed: {e}. Proceeding without cache.")

        logger.info(f"Cache miss for topic: '{topic}'. Generating new content.")
        
        if not is_openai_configured:
            content_json = self._get_mock_llm_response(topic, num_slides)
        else:
            # Await the async API call
            content_json = await self._get_llm_generated_content(topic, num_slides)

        try:
            presentation_data = PresentationData(**content_json)
            redis_client.set(cache_key, presentation_data.model_dump_json(), ex=86400)
            return presentation_data
        except Exception as e:
            logger.error(f"Failed to parse LLM response or cache it: {e}")
            raise ContentGenerationException("Failed to process content from LLM.")

    async def _get_llm_generated_content(self, topic: str, num_slides: int) -> dict:
        """Asynchronously calls our OpenAI API to get structured JSON content."""
        prompt = self._construct_llm_prompt(topic, num_slides)
        try:
            # Using the async client's create method to create the ppt content using openai API
            response = await client.chat.completions.create(
                model="gpt-4.1",
                messages=[{"role": "user", "content": prompt}],
                response_format={"type": "json_object"},
                temperature=0.7,
            )
            content = response.choices[0].message.content
            return json.loads(content)
        except Exception as e:
            logger.error(f"OpenAI API call failed: {e}")
            raise ContentGenerationException(f"Error communicating with LLM service: {e}")

    def _get_mock_llm_response(self, topic: str, num_slides: int) -> dict:
        return {
            "title": f"{topic} (Mock)",
            "slides": [
                {"type": "title_slide", "title": f"A Comprehensive Look at {topic}", "subtitle": "Generated by the Advanced AI Engine"},
                {"type": "bullet_points", "title": "Key Concepts", "points": ["Core Principle 1", "Core Principle 2", "Critical Application"]},
            ], "citations": ["Mock Source Inc., 2025"]
        }

    def _construct_llm_prompt(self, topic: str, num_slides: int) -> str:
        return f"""
        Create a presentation outline about {topic} with exactly {num_slides} slides.
        The output must be a single, valid JSON object following this exact structure:
        {{
            "title": "String",
            "slides": [
                {{
                    "type": "one of [title_slide, bullet_points, two_column, content_with_image]",
                    "title": "String (optional)", "subtitle": "String (optional, for title_slide only)",
                    "points": ["String", ...] (optional, 3-5 points), "left_content": "String (optional)",
                    "right_content": "String (optional)", "content": "String (optional)",
                    "image_suggestion": "String (optional)"
                }}
            ], "citations": ["String", ...]
        }}
        Ensure the first slide is a 'title_slide' and the content is engaging and relevant.
        """

content_service = ContentService()